# -*- coding: utf-8 -*-
"""CF Lab 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pQFHmlNuZ8VF1kdAUmp4LrOZe5O_OJqd
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df1=pd.read_csv("/content/tata.csv")
df2=pd.read_csv("/content/tvs.csv")

print(df1.head(3))
print(df2.head(3))

print("TATA MOTORS")
print()
print("Mean:", np.mean(df1['Close Price']))
print("Standard deviation:", np.std(df1['Close Price']))

print("TVS MOTORS")
print()
print("Mean:", np.mean(df2['Close Price']))
print("Standard deviation:", np.std(df2['Close Price']))

print("Corrrelation coefficient between closing prices of TATA Motors and TVS Motors:\n", np.corrcoef(df1['Close Price'], df2['Close Price']))

col1=df1['Close Price']
col2=df2['Close Price']
col11=df1['Month']
col22=df2['Month']

plt.figure(figsize=(30,10))
plt.plot(col11, col1, label="TATA Motors")
plt.plot(col22, col2, label="TVS Motors")
plt.xticks(rotation = 90)
plt.legend()
plt.show()

tata_close=df1['Close Price']
tata_open=df1['Open Price']
tvs_close=df2['Close Price']
tvs_open=df2['Open Price']
tata_var=np.var(tata_close)
tvs_var=np.var(tvs_close)
cc=np.corrcoef(tata_close, tvs_close)

def calculate_rr(open, close):
    rr=[]
    for i in range(len(open)):
        r=(close[i]-open[i])/open[i]
        rr.append(r)
    return rr

def calculate_er(rr):
    return np.mean(rr)

def calculate_var(rr, mean):
    var=[]
    for i in range(len(rr)):
        v=(rr[i]-mean)**2
        var.append(v)
    return np.mean(var)

def corr_coef(col1, col2, er1, er2):
    cc=[]
    col12=[]
    col22=[]
    n=len(col1)
    for i in range(n):
        cc.append((col1[i]-er1)*(col2[i]-er2))
        col12.append((col1[i]-er1)**2)
        col22.append((col2[i]-er2)**2)
    num=sum(cc)
    den=((sum(col12)*sum(col22))**0.5)
    return (num/den)

tata_rr=calculate_rr(tata_open, tata_close)
tvs_rr=calculate_rr(tvs_open, tvs_close)
tata_er=calculate_er(tata_rr)
tvs_er=calculate_er(tvs_rr)
tata_var=calculate_var(tata_rr, tata_er)
tvs_var=calculate_var(tvs_rr, tvs_er)
cc=corr_coef(tata_rr, tvs_rr, tata_er, tvs_er)

print(tata_er, "\t", tata_var)
print(tvs_er, "\t", tvs_var)
print(cc)

def calculate_w_mvp(sigma1, sigma2, rho12):
    num=sigma2**2-rho12*sigma1*sigma2
    den=sigma1**2+sigma2**2-2*rho12*sigma1*sigma2
    return (num/den)

def muv(w, mu1, mu2):
    muv=w*mu1+(1-w)*mu2
    return muv

def sigmav(w, sigma1, sigma2, cc):
    sigmav=w**2*sigma1**2+(1-w)**2*sigma2**2+2*w*(1-w)*sigma1*sigma2*cc
    return sigmav

w=calculate_w_mvp(tata_var, tvs_var, cc)
print(w)
expected_return=muv(w, tata_er, tvs_er)
print(expected_return)
minimum_risk=sigmav(w, tata_var, tvs_var, cc)
print(minimum_risk)