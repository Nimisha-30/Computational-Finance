# -*- coding: utf-8 -*-
"""Copy of CF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gD__uDm492NOndnBOqxFdwQtzOZUwE-j
"""

import numpy as np
from scipy.optimize import minimize

expected_returns = np.array([0.05, 0.1, 0.01])
covariance_matrix = np.array([[0.01, 0.004, 0.002],
                              [0.004, 0.03, 0.01],
                              [0.002, 0.01, 0.01]])

def objective_function(weights, expected_returns):
    return -np.dot(weights, expected_returns)

def constraint1(weights):
    return np.sum(weights) - 1.0

def constraint2(weights, covariance_matrix, target_variance):
    return np.dot(weights, np.dot(covariance_matrix, weights)) - target_variance

target_variance = 0.01

initial_weights = np.ones(len(expected_returns)) / len(expected_returns)

constraints = ({'type': 'eq', 'fun': constraint1},
               {'type': 'eq', 'fun': lambda w: constraint2(w, covariance_matrix, target_variance)})

result = minimize(objective_function, initial_weights, args=(expected_returns,), method='SLSQP', constraints=constraints)

optimal_weights = result.x

print("Optimal Weights: ", optimal_weights)
print("Optimal Expected Return:", -result.fun)
print("Portfolio Variance:", np.dot(optimal_weights, np.dot(covariance_matrix, optimal_weights)))

def objective_function(weights, covariance_matrix):
    return np.dot(weights, np.dot(covariance_matrix, weights))

def constraint1(weights, expected_returns, target_return):
    return np.dot(weights, expected_returns) - target_return

def constraint2(weights):
    return np.sum(weights) - 1.0

target_return = 0.06

initial_weights = np.ones(len(expected_returns)) / len(expected_returns)

constraints = ({'type': 'eq', 'fun': lambda w: constraint1(w, expected_returns, target_return)},
               {'type': 'eq', 'fun': constraint2})

result = minimize(objective_function, initial_weights, args=(covariance_matrix,), method='SLSQP', constraints=constraints)

optimal_weights = result.x

print("Optimal Weights:", optimal_weights)
print("Portfolio Variance:", result.fun)
print("Portfolio Expected Return:", np.dot(optimal_weights, expected_returns))