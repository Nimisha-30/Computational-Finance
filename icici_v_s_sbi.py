# -*- coding: utf-8 -*-
"""ICICI v/s SBI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X7IyfBUlK832MeX0H7ZTM6YMuChE-Mdf
"""

import numpy as np

icici_open=[355, 261, 255, 312, 362, 539, 534, 743, 892]
icici_close=[242, 255, 341, 360, 538, 534, 740, 890, 996]
sbi_open=[312, 225, 252, 310, 297, 334, 275, 461, 615]
sbi_close=[228, 249, 309, 295, 333, 274, 460, 613, 641]

def calculate_rr(open, close):
    rr=[]
    for i in range(len(open)):
        r=(close[i]-open[i])/open[i]
        rr.append(r)
    return rr

def calculate_er(rr):
    return np.mean(rr)

def calculate_var(rr, mean):
    var=[]
    for i in range(len(rr)):
        v=(rr[i]-mean)**2
        var.append(v)
    return np.mean(var)

icici_rr=calculate_rr(icici_open, icici_close)
sbi_rr=calculate_rr(sbi_open, sbi_close)
icici_er=calculate_er(icici_rr)
sbi_er=calculate_er(sbi_rr)
icici_var=calculate_var(icici_rr, icici_er)
sbi_var=calculate_var(sbi_rr, sbi_er)

print(icici_rr)
print(sbi_rr)
print(icici_er)
print(sbi_er)
print(icici_var)
print(sbi_var)

# notes
# std dev = var**0.5 => sigmav=sigma2v**0.5
print(icici_var**(1/2))
print(sbi_var**(1/2))

cc=np.corrcoef(icici_rr, sbi_rr)
print(cc)
print(cc[0][1])

def corr_coef(col1, col2, er1, er2):
    cc=[]
    col12=[]
    col22=[]
    n=len(col1)
    for i in range(n):
        cc.append((col1[i]-er1)*(col2[i]-er2))
        col12.append((col1[i]-er1)**2)
        col22.append((col2[i]-er2)**2)
    num=sum(cc)
    den=((sum(col12)*sum(col22))**0.5)
    return (num/den)

print(corr_coef(icici_rr, sbi_rr, icici_er, sbi_er))

"""w=0.5"""

def muv(w, mu1, mu2):
    muv=w*mu1+(1-w)*mu2
    return muv

def sigmav(w, sigma1, sigma2, cc):
    sigmav=w**2*sigma1**2+(1-w)**2*sigma2**2+2*w*(1-w)*sigma1*sigma2*cc
    return sigmav

mu_v=muv(0.5, icici_er, sbi_er)
sigma_v=sigmav(0.5, icici_var, sbi_var, cc[0][1])
print(mu_v)
print(sigma_v)
print(sigma_v**0.5)

# notes
icici_sigma=icici_var**(1/2)
sbi_sigma=sbi_var**(1/2)
sigma_v=sigmav(0.5, icici_sigma, sbi_sigma, cc[0][1])
print(mu_v)
print(sigma_v)
print(sigma_v**0.5)

"""Minimum Variance Portfolio"""

def calculate_w_mvp(sigma1, sigma2, rho12):
    num=sigma2**2-rho12*sigma1*sigma2
    den=sigma1**2+sigma2**2-2*rho12*sigma1*sigma2
    return (num/den)

w=calculate_w_mvp(icici_var, sbi_var, cc[0][1])
print(w)
expected_return=muv(w, icici_er, sbi_er)
print(expected_return)
minimum_risk=sigmav(w, icici_var, sbi_var, cc[0][1])
print(minimum_risk)

# notes
w=calculate_w_mvp(icici_sigma, sbi_sigma, cc[0][1])
print(w)
expected_return=muv(w, icici_er, sbi_er)
print(expected_return)
minimum_risk=sigmav(w, icici_sigma, sbi_sigma, cc[0][1])
print(minimum_risk)

"""Given muv=8.8, minimize sigmav^2, subject to muv=0.088 and w1+w2=1."""



